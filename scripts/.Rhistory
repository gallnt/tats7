plot(
seq(0:(n - 1)),
psis,
main = expression(\phi_1 = 1/2)
# Function for generating coefficients
gen = function(phi_1, theta_1, theta_2, n) {
# Assume that n is big
res = rep(0, n)
psi_0 = 1
psi_1 = phi_1 * psi_0 + theta_1
psi_2 = phi_1 * psi_1 + theta_2
res[1] = psi_0
res[2] = psi_1
res[3] = psi_2
for (i in 4:n) {
res[i] = 0.5 * res[i - 1]
}
return (res)
}
n = 100
psis = gen(0.5, 5/6, 1/6, n)
plot(
seq(0:(n - 1)),
psis,
main = expression(\phi_1 = 1/2)
# Function for generating coefficients
gen = function(phi_1, theta_1, theta_2, n) {
# Assume that n is big
res = rep(0, n)
psi_0 = 1
psi_1 = phi_1 * psi_0 + theta_1
psi_2 = phi_1 * psi_1 + theta_2
res[1] = psi_0
res[2] = psi_1
res[3] = psi_2
for (i in 4:n) {
res[i] = 0.5 * res[i - 1]
}
return (res)
}
n = 100
psis = gen(0.5, 5/6, 1/6, n)
plot(
seq(0:(n - 1)),
psis,
main = expression(phi_1 = 1/2)
)
phi_vals = c(0.8, 0.9, 0.95, 0.99)
for (val in phi_vals) {
points(gen(val, 5/6, 1/6, n))
}
# Function for generating coefficients
gen = function(phi_1, theta_1, theta_2, n) {
# Assume that n is big
res = rep(0, n)
psi_0 = 1
psi_1 = phi_1 * psi_0 + theta_1
psi_2 = phi_1 * psi_1 + theta_2
res[1] = psi_0
res[2] = psi_1
res[3] = psi_2
for (i in 4:n) {
res[i] = 0.5 * res[i - 1]
}
return (res)
}
n = 20
psis = gen(0.5, 5/6, 1/6, n)
plot(
seq(0:(n - 1)),
psis,
main = "Coefficients psi_j"
)
phi_vals = c(0.8, 0.9, 0.95, 0.99)
for (val in phi_vals) {
points(gen(val, 5/6, 1/6, n))
}
n = 20
psis = gen(0.5, 5/6, 1/6, n)
palette = c("red", "seagreen", "blue")
plot(
seq(0:(n - 1)),
psis,
main = "Coefficients psi_j"
)
phi_vals = c(0.8, 0.95, 0.99)
for (i in 1:length(phi_vals)) {
points(gen(phi_vals[i], 5/6, 1/6, n), col = palette[i])
}
legend(
x = "topright",
legend = c("0.5", "0.8", "0.95", "0.99"),
fill = c("black", "red", "seagreen", "blue")
)
# Function for generating coefficients
gen = function(phi_1, theta_1, theta_2, n) {
# Assume that n is big
res = rep(0, n)
psi_0 = 1
psi_1 = phi_1 * psi_0 + theta_1
psi_2 = phi_1 * psi_1 + theta_2
res[1] = psi_0
res[2] = psi_1
res[3] = psi_2
for (i in 4:n) {
res[i] = 0.5 * res[i - 1]
}
return (res)
}
n = 20
psis = gen(0.5, 5/6, 1/6, n)
palette = c("red", "seagreen", "blue")
plot(
seq(0:(n - 1)),
psis,
main = "Coefficients psi_j for Different phi_1 Values"
)
phi_vals = c(0.8, 0.95, 0.99)
for (i in 1:length(phi_vals)) {
points(gen(phi_vals[i], 5/6, 1/6, n), col = palette[i])
}
legend(
x = "topright",
legend = c("0.5", "0.8", "0.95", "0.99"),
fill = c("black", "red", "seagreen", "blue")
)
pi
lambda = seq(-pi, pi, 100)
lambda = seq(-pi, pi, pi / 100)
lambda = seq(-pi, pi, pi / 100)
spec_density = function(rho, theta) {
return (1 + 2 * rho(1) * cos(theta))
}
plot(spec_density(lambda))
lambda = seq(-pi, pi, pi / 100)
spec_density = function(rho, l) {
return (1 + 2 * rho * cos(l))
}
plot(spec_density(0.4, lambda))
lambda = seq(-pi, pi, pi / 100)
spec_density = function(rho, l) {
return (1 + 2 * rho * cos(l))
}
lines(spec_density(0.4, lambda))
lambda = seq(-pi, pi, pi / 100)
spec_density = function(rho, l) {
return (1 + 2 * rho * cos(l))
}
curve(spec_density(0.4, lambda))
lambda = seq(-pi, pi, pi / 100)
spec_density = function(rho, l) {
return (1 + 2 * rho * cos(l))
}
curve(spec_density(0.4, lambda), type='l')
lambda = seq(-pi, pi, pi / 100)
spec_density = function(rho, l) {
return (1 + 2 * rho * cos(l))
}
curve(v = spec_density(0.4, lambda), type='l')
lambda = seq(-pi, pi, pi / 100)
spec_density = function(rho, l) {
return (1 + 2 * rho * cos(l))
}
plot(v = spec_density(0.4, lambda), type='l')
lambda = seq(-pi, pi, pi / 100)
spec_density = function(rho, l) {
return (1 + 2 * rho * cos(l))
}
plot(x = spec_density(0.4, lambda), type='l')
lambda = seq(-pi, pi, pi / 100)
spec_density = function(rho, l) {
return (1 + 2 * rho * cos(l))
}
plot(
x = spec_density(0.4, lambda),
type='l',
xlab = "lambda"
)
lambda = seq(-pi, pi, pi / 100)
spec_density = function(rho, l) {
return (1 + 2 * rho * cos(l))
}
plot(
x = spec_density(0.4, lambda),
type='l',
xlab = "lambda"
)
lines(
x = spec_density(0.8, lambda),
col = "red"
)
lambda = seq(-pi, pi, pi / 100)
spec_density = function(rho, l) {
return (1 + 2 * rho * cos(l))
}
plot(
x = spec_density(0.8, lambda),
type='l',
xlab = "lambda"
)
lines(
x = spec_density(0.4, lambda),
col = "red"
)
legend(
x="topright",
legend = c(0.8, 0.4),
fill = c("black", "red")
)
i == 1
i = 2
i == 2
i = 2
phi_vals = c(0.1, 0.5, 0.8, 0.95, 0.99)
sigma_vals = c(1, 2, 3, 5)
cols = c("black", "red", "seagreen", "blue")
n = 200
for (phi in phi_vals) {
for (i in 1:length(sigma_vals)) {
ar = rep(0, n)
z = rnorm(n, sd = sigma_vals[i])
for (j in 2:n) {
ar[j] = phi * ar[j - 1] + z[j]
}
if (i == 1) {
plot(
ts(ar),
main = paste("AR model with phi = ", phi_vals[i]),
col = cols[i]
)
} else {
lines(
ts(ar),
col = cols[i]
)
}
}
}
phi_vals = c(0.1, 0.5, 0.8, 0.95, 0.99)
sigma_vals = c(0.1, 0.2, 0.3, 0.5)
cols = c("black", "red", "seagreen", "blue")
n = 200
for (phi in phi_vals) {
for (i in 1:length(sigma_vals)) {
ar = rep(0, n)
z = rnorm(n, sd = sigma_vals[i])
for (j in 2:n) {
ar[j] = phi * ar[j - 1] + z[j]
}
if (i == 1) {
plot(
ts(ar),
main = paste("AR model with phi = ", phi_vals[i]),
col = cols[i]
)
} else {
lines(
ts(ar),
col = cols[i]
)
}
}
}
phi_vals = c(0.1, 0.5, 0.8, 0.95, 0.99)
sigma_vals = c(0.1, 0.2, 0.3, 0.5)
cols = c("black", "red", "seagreen", "blue")
n = 200
for (phi in phi_vals) {
for (i in 1:length(sigma_vals)) {
ar = rep(0, n)
z = rnorm(n, sd = 1)
for (j in 2:n) {
ar[j] = phi * ar[j - 1] + z[j]
}
if (i == 1) {
plot(
ts(ar),
main = paste("AR model with phi = ", phi_vals[i]),
col = cols[i]
)
} else {
lines(
ts(ar),
col = cols[i]
)
}
}
}
plot(
ts(ar),
main = paste("AR model with phi = ", phi),
col = cols[i]
)
phi_vals = c(0.1, 0.5, 0.8, 0.95, 0.99)
sigma_vals = c(0.1, 0.2, 0.3, 0.5)
cols = c("black", "red", "seagreen", "blue")
n = 200
for (phi in phi_vals) {
for (i in 1:length(sigma_vals)) {
ar = rep(0, n)
z = rnorm(n, sd = 1)
for (j in 2:n) {
ar[j] = phi * ar[j - 1] + z[j]
}
if (i == 1) {
plot(
ts(ar),
main = paste("AR model with phi = ", phi),
col = cols[i]
)
} else {
lines(
ts(ar),
col = cols[i]
)
}
}
}
phi_vals = c(0.1, 0.5, 0.8)
sigma_vals = c(0.1, 0.2, 0.3, 0.5)
cols = c("black", "red", "seagreen", "blue")
n = 200
for (phi in phi_vals) {
for (i in 1:length(sigma_vals)) {
ar = rep(0, n)
z = rnorm(n, sd = 1)
for (j in 2:n) {
ar[j] = phi * ar[j - 1] + z[j]
}
if (i == 1) {
plot(
ts(ar),
main = paste("AR model with phi = ", phi),
col = cols[i]
)
} else {
lines(
ts(ar),
col = cols[i]
)
}
}
}
phi_vals = c(0.1, 0.5, 0.8)
sigma_vals = c(1, 2, 3, 5)
cols = c("black", "red", "seagreen", "blue")
n = 200
for (phi in phi_vals) {
for (i in 1:length(sigma_vals)) {
ar = rep(0, n)
z = rnorm(n, sd = 1)
wn = rnorn(n, sd = sigma_vals)
for (j in 2:n) {
ar[j] = phi * ar[j - 1] + z[j]
}
if (i == 1) {
plot(
ts(ar),
main = paste("AR model with phi = ", phi),
col = cols[i],
xlim = c(-10, 10)
)
} else {
lines(
ts(ar),
col = cols[i]
)
}
}
}
phi_vals = c(0.1, 0.5, 0.8)
sigma_vals = c(1, 2, 3, 5)
cols = c("black", "red", "seagreen", "blue")
n = 200
for (phi in phi_vals) {
for (i in 1:length(sigma_vals)) {
ar = rep(0, n)
z = rnorm(n, sd = 1)
wn = rnorm(n, sd = sigma_vals)
for (j in 2:n) {
ar[j] = phi * ar[j - 1] + z[j]
}
if (i == 1) {
plot(
ts(ar + wn),
main = paste("Corrupted AR model with phi =", phi, "and Different
WN Variances"),
col = cols[i],
ylim = c(-10, 10)
)
} else {
lines(
ts(ar + wn),
col = cols[i]
)
}
}
}
phi_vals = c(0.1, 0.5, 0.8)
sigma_vals = c(1, 2, 3, 5)
cols = c("black", "red", "seagreen", "blue")
n = 100
for (phi in phi_vals) {
for (i in 1:length(sigma_vals)) {
ar = rep(0, n)
z = rnorm(n, sd = 1)
wn = rnorm(n, sd = sigma_vals)
for (j in 2:n) {
ar[j] = phi * ar[j - 1] + z[j]
}
if (i == 1) {
plot(
ts(ar + wn),
main = paste("Corrupted AR model with phi =", phi, "and Different
WN Variances"),
col = cols[i],
ylim = c(-10, 10)
)
} else {
lines(
ts(ar + wn),
col = cols[i]
)
}
}
}
phi_vals = c(0.1, 0.5, 0.8)
sigma_vals = c(1, 2, 3, 5)
cols = c("black", "red", "seagreen", "blue")
n = 100
for (phi in phi_vals) {
for (i in 1:length(sigma_vals)) {
ar = rep(0, n)
z = rnorm(n, sd = 1)
wn = rnorm(n, sd = sigma_vals)
for (j in 2:n) {
ar[j] = phi * ar[j - 1] + z[j]
}
if (i == 1) {
plot(
ts(ar + wn),
main = paste("Corrupted AR model with phi =", phi, "and Different
WN Variances"),
col = cols[i],
ylim = c(-10, 10)
)
} else {
lines(
ts(ar + wn),
col = cols[i]
)
}
legend(
x="topright",
legend = sigma_vals,
fill = cols
)
}
}
phi_vals = c(0.1, 0.5, 0.8)
sigma_vals = c(1, 2, 3, 5)
cols = c("black", "red", "seagreen", "blue")
n = 100
for (phi in phi_vals) {
for (i in 1:length(sigma_vals)) {
ar = rep(0, n)
z = rnorm(n, sd = 1)
wn = rnorm(n, sd = sigma_vals)
for (j in 2:n) {
ar[j] = phi * ar[j - 1] + z[j]
}
if (i == 1) {
plot(
ts(ar + wn),
main = paste("Corrupted AR model with phi =", phi, "and Different
WN Variances"),
col = cols[i],
ylim = c(-10, 10)
)
} else {
lines(
ts(ar + wn),
col = cols[i]
)
}
legend(
x="topright",
legend = sigma_vals,
fill = cols
)
}
}
qnorm(0)
pnorm(0)
1 - pnorm(0.1 / 1.29 * 10^(-3))
1 - pnorm(0.1 / (1.29 * 10^(-3)))
1 - pnorm(0.1 / sqrt(1.29 * 10^(-3)))
x_star = 4.41891
pnorm(0)
0.6 * pnorm(x_star, mean = 7) + 0.4 * pnorm(x_star, mean = 2, lower.tail = FALSE)
setwd("~/Desktop/tats7/scripts/")
# Code for Figure 1.1
library(tseries)
x = data(bev)
plot(x, xlab="Year", ylab="Wheat price index", xaxt="n")
x.pos = c(1500, 1560, 1620, 1680, 1740, 1800, 1869)
axis(1, x.pos, x.pos)
library(tseries)
data(bev)
plot(bev, xlab="Year", ylab="Wheat price index", xaxt="n")
x.pos = c(1500, 1560, 1620, 1680, 1740, 1800, 1869)
axis(1, x.pos, x.pos)
